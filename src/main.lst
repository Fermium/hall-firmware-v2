   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.portwrite,"ax",@progbits
  11               	.global	portwrite
  13               	portwrite:
  14               	.LFB6:
  15               		.file 1 "./src/pins.h"
   1:./src/pins.h  **** //example usage
   2:./src/pins.h  **** // portwrite (0x0A, 2, true)  //write high on PORTA2
   3:./src/pins.h  **** // portwrite (0x0B, 3, false) //write low on PORTB3
   4:./src/pins.h  **** #include <stdbool.h>
   5:./src/pins.h  **** #include <avr/io.h>
   6:./src/pins.h  **** 
   7:./src/pins.h  **** 
   8:./src/pins.h  **** void portwrite (char port, char pincacca, bool outvalue)
   9:./src/pins.h  **** {
  16               		.loc 1 9 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  10:./src/pins.h  ****   unsigned char set_pin = 1 << pincacca;
  23               		.loc 1 10 0
  24 0000 21E0      		ldi r18,lo8(1)
  25 0002 30E0      		ldi r19,0
  26 0004 00C0      		rjmp 2f
  27               		1:
  28 0006 220F      		lsl r18
  29               		2:
  30 0008 6A95      		dec r22
  31 000a 02F4      		brpl 1b
  32               	.LVL1:
  11:./src/pins.h  ****   unsigned char clear_pin = ~set_pin;
  33               		.loc 1 11 0
  34 000c 922F      		mov r25,r18
  35 000e 9095      		com r25
  36               	.LVL2:
  12:./src/pins.h  ****   
  13:./src/pins.h  ****   switch (port) {
  37               		.loc 1 13 0
  38 0010 8C30      		cpi r24,lo8(12)
  39 0012 01F0      		breq .L3
  40 0014 00F4      		brsh .L4
  41 0016 8B30      		cpi r24,lo8(11)
  42 0018 01F0      		breq .L5
  43 001a 0895      		ret
  44               	.L4:
  45 001c 8D30      		cpi r24,lo8(13)
  46 001e 01F0      		breq .L6
  47 0020 8E30      		cpi r24,lo8(14)
  48 0022 01F0      		breq .L7
  49 0024 0895      		ret
  50               	.L5:
  14:./src/pins.h  ****     case 0x0B:  
  15:./src/pins.h  ****       outvalue  ? (PORTB |= set_pin) : (PORTB &= clear_pin);
  51               		.loc 1 15 0
  52 0026 85B1      		in r24,0x5
  53               	.LVL3:
  54 0028 4423      		tst r20
  55 002a 01F0      		breq .L8
  56               		.loc 1 15 0 is_stmt 0 discriminator 1
  57 002c 282B      		or r18,r24
  58               	.LVL4:
  59 002e 25B9      		out 0x5,r18
  60 0030 0895      		ret
  61               	.LVL5:
  62               	.L8:
  63               		.loc 1 15 0 discriminator 2
  64 0032 9823      		and r25,r24
  65               	.LVL6:
  66 0034 95B9      		out 0x5,r25
  67 0036 0895      		ret
  68               	.LVL7:
  69               	.L3:
  16:./src/pins.h  ****       break;
  17:./src/pins.h  ****     case 0x0C:
  18:./src/pins.h  ****       outvalue  ? (PORTC |= set_pin) : (PORTC &= clear_pin);
  70               		.loc 1 18 0 is_stmt 1
  71 0038 88B1      		in r24,0x8
  72               	.LVL8:
  73 003a 4111      		cpse r20,__zero_reg__
  74 003c 00C0      		rjmp .L12
  75               		.loc 1 18 0 is_stmt 0 discriminator 2
  76 003e 9823      		and r25,r24
  77               	.LVL9:
  78 0040 98B9      		out 0x8,r25
  79 0042 0895      		ret
  80               	.LVL10:
  81               	.L6:
  19:./src/pins.h  ****       break;
  20:./src/pins.h  ****     case 0x0D:
  21:./src/pins.h  ****       outvalue  ? (PORTC |= set_pin) : (PORTD &= clear_pin);
  82               		.loc 1 21 0 is_stmt 1
  83 0044 4423      		tst r20
  84 0046 01F0      		breq .L10
  85               		.loc 1 21 0 is_stmt 0 discriminator 1
  86 0048 88B1      		in r24,0x8
  87               	.LVL11:
  88               	.L12:
  89 004a 282B      		or r18,r24
  90               	.LVL12:
  91 004c 28B9      		out 0x8,r18
  92 004e 0895      		ret
  93               	.LVL13:
  94               	.L10:
  95               		.loc 1 21 0 discriminator 2
  96 0050 8BB1      		in r24,0xb
  97               	.LVL14:
  98 0052 9823      		and r25,r24
  99               	.LVL15:
 100 0054 9BB9      		out 0xb,r25
 101 0056 0895      		ret
 102               	.LVL16:
 103               	.L7:
  22:./src/pins.h  ****       break;
  23:./src/pins.h  ****     case 0x0E:
  24:./src/pins.h  ****       outvalue  ? (PORTE |= set_pin) : (PORTE &= clear_pin);
 104               		.loc 1 24 0 is_stmt 1
 105 0058 8EB1      		in r24,0xe
 106               	.LVL17:
 107 005a 4423      		tst r20
 108 005c 01F0      		breq .L11
 109               		.loc 1 24 0 is_stmt 0 discriminator 1
 110 005e 282B      		or r18,r24
 111               	.LVL18:
 112 0060 2EB9      		out 0xe,r18
 113 0062 0895      		ret
 114               	.LVL19:
 115               	.L11:
 116               		.loc 1 24 0 discriminator 2
 117 0064 9823      		and r25,r24
 118               	.LVL20:
 119 0066 9EB9      		out 0xe,r25
 120 0068 0895      		ret
 121               		.cfi_endproc
 122               	.LFE6:
 124               		.section	.text.init_io,"ax",@progbits
 125               	.global	init_io
 127               	init_io:
 128               	.LFB7:
 129               		.file 2 "src/main.c"
   1:src/main.c    **** /*
   2:src/main.c    ****  * (c) Anil Kumar Pugalia, 2010. Email: email@sarika-pugs.com
   3:src/main.c    ****  *
   4:src/main.c    ****  * ATmega48/88/168, ATmega16/32
   5:src/main.c    ****  * 
   6:src/main.c    ****  * Example Blink. Toggles all IO pins at 1Hz
   7:src/main.c    ****  */
   8:src/main.c    **** 
   9:src/main.c    **** #include <avr/io.h>
  10:src/main.c    **** #include <util/delay.h>
  11:src/main.c    **** #include <stdbool.h>
  12:src/main.c    **** #include <src/pins.h>
  13:src/main.c    **** 
  14:src/main.c    **** void init_io(void)
  15:src/main.c    **** {
 130               		.loc 2 15 0 is_stmt 1
 131               		.cfi_startproc
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 0 */
 135               	.L__stack_usage = 0
  16:src/main.c    ****     DDRB = 0xff;
 136               		.loc 2 16 0
 137 0000 8FEF      		ldi r24,lo8(-1)
 138 0002 84B9      		out 0x4,r24
  17:src/main.c    ****     PORTB = 0x00;
 139               		.loc 2 17 0
 140 0004 15B8      		out 0x5,__zero_reg__
 141 0006 0895      		ret
 142               		.cfi_endproc
 143               	.LFE7:
 145               		.section	.text.startup.main,"ax",@progbits
 146               	.global	main
 148               	main:
 149               	.LFB8:
  18:src/main.c    **** }
  19:src/main.c    **** 
  20:src/main.c    **** int main(void)
  21:src/main.c    **** {
 150               		.loc 2 21 0
 151               		.cfi_startproc
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 0 */
 155               	.L__stack_usage = 0
  22:src/main.c    **** 	init_io();
 156               		.loc 2 22 0
 157 0000 0E94 0000 		call init_io
 158               	.LVL21:
 159               	.L16:
 160               	.LBB14:
 161               	.LBB15:
  15:./src/pins.h  ****       break;
 162               		.loc 1 15 0 discriminator 1
 163 0004 289A      		sbi 0x5,0
 164               	.LVL22:
 165               	.LBE15:
 166               	.LBE14:
 167               	.LBB16:
 168               	.LBB17:
 169               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 170               		.loc 3 163 0 discriminator 1
 171 0006 2FEF      		ldi r18,lo8(1599999)
 172 0008 89E6      		ldi r24,hi8(1599999)
 173 000a 98E1      		ldi r25,hlo8(1599999)
 174 000c 2150      	1:	subi r18,1
 175 000e 8040      		sbci r24,0
 176 0010 9040      		sbci r25,0
 177 0012 01F4      		brne 1b
 178 0014 00C0      		rjmp .
 179 0016 0000      		nop
 180               	.LVL23:
 181               	.LBE17:
 182               	.LBE16:
 183               	.LBB18:
 184               	.LBB19:
  15:./src/pins.h  ****       break;
 185               		.loc 1 15 0 discriminator 1
 186 0018 2898      		cbi 0x5,0
 187               	.LVL24:
 188               	.LBE19:
 189               	.LBE18:
 190               	.LBB20:
 191               	.LBB21:
 192               		.loc 3 163 0 discriminator 1
 193 001a 2FEF      		ldi r18,lo8(1599999)
 194 001c 89E6      		ldi r24,hi8(1599999)
 195 001e 98E1      		ldi r25,hlo8(1599999)
 196 0020 2150      	1:	subi r18,1
 197 0022 8040      		sbci r24,0
 198 0024 9040      		sbci r25,0
 199 0026 01F4      		brne 1b
 200 0028 00C0      		rjmp .
 201 002a 0000      		nop
 202 002c 00C0      		rjmp .L16
 203               	.LBE21:
 204               	.LBE20:
 205               		.cfi_endproc
 206               	.LFE8:
 208               		.text
 209               	.Letext0:
 210               		.file 4 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccSAbWe0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSAbWe0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSAbWe0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSAbWe0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSAbWe0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSAbWe0.s:13     .text.portwrite:0000000000000000 portwrite
     /tmp/ccSAbWe0.s:127    .text.init_io:0000000000000000 init_io
     /tmp/ccSAbWe0.s:148    .text.startup.main:0000000000000000 main

NO UNDEFINED SYMBOLS
